Steps to setup the project

Step 1: First create a virtual env file:
        python -m venv venv

Step 2: Activate virtual env in windows:
        venv/Scripts/activate
        
        For Ubuntu/linux:
        source venv/bin/activate

Step 3: Run the below commond to install the packages
        pip install -r requirements.txt

        below packages will get installed:
        1. pip install pandas
        2. pip install fake-useragent
        3. pip install selenium

Step 4: Run the script:
        python email_script.py

** To Make requirements.txt file run below commond:
   pip freeze > requirements.txt

optional_step: can also create workflow settings for current.
steps1: ctrl + shift + p: opens Preferences: Open Workspace Settings (JSON)
AND a work flow is created.

Docs: https://selenium-python.readthedocs.io/waits.html

-----------------------------------
---------
Packages:
---------
pip install selenium
pip install fake-useragent
pip install pytest

For Reports:
------------
pip install pytest-html
pip install allure-pytest
-----------------------------------

Search Terms:
-------------
-> how to get the name of all dropdown elements in selenium python
-> how to get the name options of all dropdown elements in selenium python
-> how to get the name options label of all dropdown elements in selenium python 
-> which testing framework do you prefer for automation testing python
-> how to manage otp number box in selenium python headless mode
-> having too many try except causes the code to be slow?
-> i am developing a automation script for automating webisite testing. 
   i want is after developing the scripts and after deployment. I want 
   that if i write test cases and deploy them then the testing should 
   happend according to it and automatically.
-> Provide the structure for a project that is being developed for e-commerce 
   website automation testing using Python and pytest.

------------------------------------------------------------------------
This is my POM Structure:
my_project/      
├── settings/
│   ├── __init__.py
│   ├── config.py
│   ├── test.py
│   └── log_config.json
└── pages
│   └── login_window.py    
└── tests/
    └── test_loginWindow.py   

And i have below code in pages/login_window.py
import time

from settings.log_setup import general_logger, exception_logger

from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException

class LoginWindow:
    def __init__(self, driver):
        self.driver = driver
        self.loginWindow = '.align-bottom svg' 
    
    def open_login_window(self):
        try:
            login_window = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, self.loginWindow))
            )
            login_window.click()
            general_logger.info("Login Pop Up Window Click")
            return True
        except Exception as e:
            exception_logger.error(f"Error opening Login Pop Up Window Click {e}")
    
    def get_login_window(self, input_field_mobile):
        try:
            login_window = self.wait_for_element(By.CSS_SELECTOR, self.loginWindow_button)
            login_window.click()
            pop_window = self.wait_for_element(By.XPATH, self.loginpopWindow)
            if pop_window:
                general_logger.info('Found The Login/SignUp Form')
                mobile_input_box = self.driver.find_element(By.XPATH, self.mobile_input_box)
                mobile_input_box.send_keys(input_field_mobile)
                next_button = self.driver.find_element(By.XPATH, self.submit_button)
                if next_button.is_enabled() and next_button.is_displayed():
                    next_button.click()
                    general_logger.info("Next Button was clicked!")
                    return True
                else:
                    return False
            else:
                return False
        except Exception as e:
            exception_logger.error(f"Login Pop Up Window Not Found: {e}")
            return False

And inside the test_loginWindow.py i have below code:
from settings.config import WebDriverSetup
from settings.log_setup import general_logger, exception_logger

from pages.login_window import LoginWindow

import pytest

@pytest.fixture()
def driver_setup():
    """
    This fixture sets up the WebDriver and performs product search actions.
    """
    web_driver_setup = WebDriverSetup(headless=True)  # Change to True for headless mode
    driver = web_driver_setup.setup_driver()
    yield driver  
    
def test_open_webSite(driver_setup):
    driver = driver_setup
    try:
        driver.get("https://nourishstore.in/")
        general_logger.info("Navigated to nourishstore.in")
    except Exception as e:
        exception_logger.error(f"Error loading website: {e}")
        pytest.fail(f"Failed to load website: {e}")
        driver.close()
        
def test_openloginWindow(driver_setup):
    driver = driver_setup
    driver.get("https://nourishstore.in/")
    Openlogin_window = LoginWindow(driver)
    true_status = Openlogin_window.login_window()
    assert true_status == True, "PASSED"

def test_valid_mobile_number(driver_setup):
    """
    Test case for valid mobile number input in the login form.
    """
    driver = driver_setup
    driver.get("https://nourishstore.in/")
    login_window = LoginWindow(driver)
    mobile_number = "8884154409"  # Replace with a valid mobile number for your test
    result = login_window.get_login_window(mobile_number)
    assert result is True, "Login pop-up did not function correctly with valid mobile number." 

Now what i what i want to ask if the way is correct?
if i dont return true from open_login_window then what can
i do?
----------------------------------------------------------------------


-----------------------------------------------------------------------------------------------
Commands:
---------
To run the codes from zextra folder : python -m zextra.website
                                      -------------------------

To run test with allure : python -m pytest --alluredir allure-results 
                          -------------------------------------------

To run test with pytestHtml : python -m pytest --maxfail=3 --disable-warnings --html=report.html
                              ------------------------------------------------------------------

To convert the allure to report version : allure serve D:\automation-nourish\allure-results
                                          -------------------------------------------------

To get allure version : allure --version

Allure-github : https://github.com/allure-framework/allure2/releases
------------------------------------------------------------------------------------------------